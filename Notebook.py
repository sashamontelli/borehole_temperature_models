import inspect
import sys

from contextlib import contextmanager
from enum import auto, Enum
from typing import Optional


# ----------------------------------------------------------------------
@contextmanager
def Cell(
    id: Optional[str]=None,
    preserve_variables: None | str | list[str]=None,    # variable names or '*'
    dependencies: None | str | list[str]=None,          # ids
    *,
    preserve_as_class: bool=False,
):
    # ----------------------------------------------------------------------
    class Frame(Enum):
        Self                                = 0
        ContentManager                      = auto()
        Caller                              = auto()

    # ----------------------------------------------------------------------
    CELL_STATUS_ATTRIBUTE_NAME              = "___cell_status___"

    # ----------------------------------------------------------------------

    if preserve_as_class:
        if id is None:
            raise Exception("'id' must be provided when 'preserve_as_class' is set.")

        if preserve_variables is None:
            preserve_variables = "*"

    frame = inspect.stack()[Frame.Caller.value][0]

    if dependencies:
        if isinstance(dependencies, str):
            dependencies = [dependencies, ]

        cell_status: set[str] = globals().get(CELL_STATUS_ATTRIBUTE_NAME, set())

        missing_dependencies: list[str] = []

        for dependency in dependencies:
            if dependency not in cell_status:
                missing_dependencies.append(dependency)

        if missing_dependencies:
            raise Exception(
                "This cell has dependencies on other cells that have not been run: {}.".format(
                    ", ".join("'{}'".format(dependency) for dependency in missing_dependencies),
                ),
            ) from None

    original_locals: set[str] = set(frame.f_locals.keys())

    preserve_variables_set: Optional[set[str]] = None

    if preserve_variables != "*":
        preserve_variables_set = set()

        if isinstance(preserve_variables, list):
            preserve_variables_set.update(preserve_variables)
        elif isinstance(preserve_variables, str):
            preserve_variables_set.add(preserve_variables)
        elif preserve_variables is None:
            pass # Nothing to do here
        else:
            assert False, preserve_variables  # pragma: no cover

    encountered_exception = False

    try:
        yield

        # Record the successful completion of this cell
        if id is not None:
            if CELL_STATUS_ATTRIBUTE_NAME not in globals():
                globals()[CELL_STATUS_ATTRIBUTE_NAME] = set()

            globals()[CELL_STATUS_ATTRIBUTE_NAME].add(id)

    except:
        # Do no preserve any variables
        preserve_variables_set = set()

        encountered_exception = True
        raise

    finally:
        # ----------------------------------------------------------------------
        def GetNewVariables() -> set[str]:
            new_locals = set(frame.f_locals.keys())
            return new_locals.difference(original_locals)

        # ----------------------------------------------------------------------

        if preserve_variables_set is not None:
            for new_variable in GetNewVariables():
                if new_variable in preserve_variables_set:
                    preserve_variables_set.remove(new_variable)
                elif new_variable != CELL_STATUS_ATTRIBUTE_NAME:
                    frame.f_locals.pop(new_variable)

            if not encountered_exception:
                for preserve_variable in preserve_variables_set:
                    sys.stderr.write("WARNING: The variable '{}' was set to preserve but was not generated by the cell.\n".format(preserve_variable))

        if preserve_as_class:
            new_variables = GetNewVariables()

            if not new_variables:
                if not encountered_exception:
                    sys.stderr.write("WARNING: New variables were to be preserved as a class, but no new variables were found.\n")
            else:
                # ----------------------------------------------------------------------
                class Object(object):
                    pass

                # ----------------------------------------------------------------------

                new_object = Object()

                for new_variable in new_variables:
                    setattr(new_object, new_variable, frame.f_locals.pop(new_variable))

                assert id is not None
                frame.f_locals[id] = new_object
